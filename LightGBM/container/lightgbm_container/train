#!/usr/bin/env python
#-*- encoding:utf-8 -*-
import json
from logging import getLogger, StreamHandler, DEBUG, INFO, WARNING, ERROR, CRITICAL
import os
import pickle
import sys
import traceback
import subprocess
# Third Party
import pandas as pd
import lightgbm as lgb
from sklearn import datasets
from sklearn.model_selection import train_test_split

#logger setting
logger = getLogger(__name__)
handler = StreamHandler()
handler.setLevel(DEBUG)
logger.setLevel(os.getenv("LOG_LEVEL", WARNING))
logger.addHandler(handler)
logger.propagate = False

# These are the paths to where SageMaker mounts interesting things in your container.
prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')
inputdataconfig_path = os.path.join(prefix, 'input/config/inputdataconfig.json')


valid_channel_names = ['train', 'validation']

# The function to execute the training.
def train():
    logger.debug("Starting the training.")
    logger.debug(subprocess.run(["tree","/opt"]))
    try:
        with open(param_path, 'r') as f:
            #https://qiita.com/nabenabe0928/items/6b9772131ba89da00354
            hyperparams = json.load(f)

        logger.debug(f"hyperparams = {hyperparams}")


        with open(inputdataconfig_path, 'r') as f:
            inputdataconfig = json.load(f)

        logger.debug(f"inputdataconfig = {inputdataconfig}")


        inputdata_dic = {}
        for channel_name in inputdataconfig.keys():
            #If channel_name is not "train" or "validation"
            #AssertionError: input data channel must be included in ['train', 'validation']
            assert channel_name in valid_channel_names, 'input data channel must be included in '+str(valid_channel_names)
            inputdata_path = os.path.join(input_path, channel_name, channel_name+'.bin')
            inputdata_dic[channel_name] = lgb.Dataset(inputdata_path)


        # train with the light-gbm
        model = lgb.train(
            hyperparams,
            inputdata_dic['train'],
            valid_sets= [inputdata_dic['validation']] if 'validation' in inputdata_dic else None
        )

        #save the model
        model.save_model(os.path.join(model_path, 'lightgbm_model.txt'))

    except Exception as e:
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as f:
            f.write(f"line = {sys._getframe().f_lineno} , type = {type(e)} , message = {e}\n" + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print(f"line = {sys._getframe().f_lineno} , type = {type(e)} , message = {e}\n" + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)
    else:
        logger.debug('Training complete.')

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
